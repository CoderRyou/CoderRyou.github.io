import{_ as e,c as n,b as a,o as l}from"./app-B2mBavQS.js";const i={};function t(c,s){return l(),n("div",null,s[0]||(s[0]=[a(`<p>在Shell脚本编程中，读取文件的每一行并进行处理是一项常见的任务。有多种方法可以实现这一点，但最常用的是<code>while read line</code>循环。这种方法可以逐行读取文件，并将每行的内容赋值给变量，然后在循环体内对该变量进行操作。</p><p>以下是几种使用<code>while read line</code>读取文件每行的方法及其示例：</p><h2 id="使用重定向" tabindex="-1"><a class="header-anchor" href="#使用重定向"><span>使用重定向</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token builtin class-name">read</span> line</span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$line</span></span>
<span class="line"><span class="token keyword">done</span> <span class="token operator">&lt;</span> test.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>&lt; test.txt</code>将文件<code>test.txt</code>的内容重定向到<code>while</code>循环中。<code>read line</code>命令从文件中读取一行，并将其存储在变量<code>line</code>中。然后<code>echo $line</code>将这一行打印到标准输出。</p><h2 id="使用管道" tabindex="-1"><a class="header-anchor" href="#使用管道"><span>使用管道</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line</span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$line</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，<code>cat test.txt</code>命令的输出通过管道传递给<code>while read line</code>循环。这种方法的效果与使用重定向类似，但是它在子shell中执行，这意味着在循环内部对变量进行的任何修改在循环外部都不会保留。</p><h2 id="使用for循环" tabindex="-1"><a class="header-anchor" href="#使用for循环"><span>使用for循环</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token punctuation">\\</span><span class="token variable"><span class="token variable">\`</span><span class="token function">cat</span> test.txt<span class="token punctuation">\\</span><span class="token variable">\`</span></span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$line</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code>循环与<code>while read line</code>循环有所不同。<code>for</code>循环会读取文件中的每个以空格分隔的字符串，而不是逐行读取。这可能会导致不同的行为，尤其是当文件中的行包含空格时。</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">总结</p><ul><li>在选择使用哪种方法时，通常推荐使用<strong>重定向</strong>的方式，因为它在当前shell环境下执行，并且循环内的变量赋值在退出循环后仍然有效。此外，使用重定向的方式每次只占用一行数据的内存，而不是整个文件的内容。</li><li>在实际应用中，<code>while read line</code>循环可以用于各种场景，例如从文件中读取配置信息，处理日志文件，或者作为数据库备份脚本的一部分。通过结合其他Shell命令和脚本逻辑，<code>while read line</code>提供了一种灵活且强大的方式来处理文本文件的每一行。</li></ul></div>`,12)]))}const d=e(i,[["render",t]]),r=JSON.parse('{"path":"/blogs/shell/read_line.html","title":"Shell中读取文件每行的方法","lang":"zh-CN","frontmatter":{"title":"Shell中读取文件每行的方法","date":"2025/03/31","tags":["shell"],"categories":["shell","技术分享"]},"headers":[{"level":2,"title":"使用重定向","slug":"使用重定向","link":"#使用重定向","children":[]},{"level":2,"title":"使用管道","slug":"使用管道","link":"#使用管道","children":[]},{"level":2,"title":"使用for循环","slug":"使用for循环","link":"#使用for循环","children":[]}],"git":{"createdTime":1761409505000,"updatedTime":1761409505000,"contributors":[{"name":"ryou","email":"zxc1106190679@qq.com","commits":1}]},"filePathRelative":"blogs/shell/read_line.md"}');export{d as comp,r as data};
